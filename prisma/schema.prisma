generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model inventory {
  item_id      Int          @default(autoincrement())
  user_id      Int          @default(autoincrement())
  wallet_id    String?      @db.VarChar(50)
  inventory_id Int          @id @default(autoincrement())
  item         item         @relation(fields: [item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction)
  users        users        @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  user_wallet  user_wallet? @relation(fields: [wallet_id], references: [wallet_id], onDelete: NoAction, onUpdate: NoAction)
}

model item {
  item_id       Int            @id @default(autoincrement())
  item_name     String?        @db.VarChar(20)
  item_category String?        @db.VarChar(30)
  item_design   String?        @db.VarChar(30)
  item_image    String?        @db.VarChar(120)
  inventory     inventory[]
  transactions  transactions[]
}

model transactions {
  transaction_id        Int          @id @unique @default(autoincrement())
  transaction_hash      String?      @db.VarChar(70)
  transaction_timestamp DateTime?    @db.Timestamp(6)
  item_id               Int          @default(autoincrement())
  user_id               Int          @default(autoincrement())
  wallet_id             String?      @db.VarChar(50)
  eth_amount            Float?
  transaction_type      String       @db.VarChar(10)
  buyer_wallet_id       String?      @db.VarChar(50)
  seller_wallet_id      String?      @db.VarChar(50)
  nft_id                Int?
  item                  item         @relation(fields: [item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction)
  users                 users        @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  user_wallet           user_wallet? @relation(fields: [wallet_id], references: [wallet_id], onDelete: NoAction, onUpdate: NoAction)
}

model user_wallet {
  wallet_id    String         @id @unique @db.VarChar(50)
  eth_amount   Int?
  user_id      Int            @default(autoincrement())
  auctions     auctions[]
  bids         bids[]
  inventory    inventory[]
  transactions transactions[]
  users        users          @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  user_id         Int            @id @unique @default(autoincrement())
  user_name       String?        @unique @db.VarChar(20)
  user_mail       String?        @unique @db.VarChar(30)
  user_password   String?        @db.VarChar(100)
  user_activation Boolean        @default(false)
  inventory       inventory[]
  transactions    transactions[]
  user_wallet     user_wallet[]
}

model auctions {
  auction_id  Int         @id @unique @default(autoincrement())
  wallet_id   String      @db.VarChar(50)
  nft_id      Int
  signature   String      @db.VarChar(100)
  price       Float
  user_wallet user_wallet @relation(fields: [wallet_id], references: [wallet_id], onDelete: NoAction, onUpdate: NoAction)
  bids        bids[]
}

model bids {
  bid_id      Int         @id @unique @default(autoincrement())
  auction_id  Int
  bid         Float
  wallet_id   String      @db.VarChar(50)
  auctions    auctions    @relation(fields: [auction_id], references: [auction_id], onDelete: NoAction, onUpdate: NoAction)
  user_wallet user_wallet @relation(fields: [wallet_id], references: [wallet_id], onDelete: NoAction, onUpdate: NoAction)
}
